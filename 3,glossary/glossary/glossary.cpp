#include "../../../headers/std_lib_facilities.h"

int main() {
	// This is the technical words glossary.
	
	cout << "\n\n--- Chapter 3 - Objects, Types and Values --- \n\n";

	cout << "// - One line comment.\n";
	cout << "<< - Stream direction sign.\n";
	cout << "library - It is set of statments for reuse.\n";
	cout << "Compilation Error - It is error that occures when program is compiled.\n";
	cout << "C++ - C based high level language, created by Bjarne Stroustrup in 1985.\n";
	cout << "cout - shorten of stream control output.\n";
	cout << "output data - data that goes from the program.\n";
	cout << "function - It is statment for computer. It contains type, function name, parameters and definition.\n";
	cout << "IDE - interactive or integrated developement envirement. It contains all nessecary tools for developer to produce a program.\n";
	cout << "#include - It is derective that informs copiler which header files add and where it can find them.\n";
	cout << "instruction/stetment - single command for computer.\n";
	cout << "Objective code - it is code generated from source code. It is hard to understand for humans but easy to understand for computers. It doesn't contain comments.\n";
	cout << "Source code - it contains sets of instructions like functions writen in way that is understable for humans and can contain comments. From this type of code compiler create objective code.\n";
	cout << "comment - is a string that is ignored by compiler. One line comment start with // and multilines comment starts with /* and ends with */\n";
	cout << "compilator - is an program that compiles source code to objective code. In other words it takes files that ends with .cpp, .h and transle them to low level machine code without comments.\n";
	cout << "linker - is a program that takes objective codes and link them togeter in one executible program.\n";
	cout << "main() - is a fragment of function definition.\n";
	cout << "header - contains definitions and sets of functions.\n";
	cout << "program - Is set of instructions what computer has to do and how it can do it.\n";
	cout << "executible - last stage of production. It is finished, compiled and linked file, that we can run on our computer.\n";
	
	cout << "\n\n--- Chapter 4 - Performing calculations ---\n\n";

	cout << "abstraction - is a situation where the way a computer works and the problems it solves are brought closer to human thinking rather than machine code. For example, programming languages are designed to be more familiar to human language, making them less about zeros and ones and more about expressing concepts in a way humans understand.\n";
	cout << "begin() - It is a vector class methos, that returns the iterator points to first element of vector.\n";
	cout << "input data - information passing through specific devices like keyboard or files to computer.\n";
	cout << "output data - information generated by computer and providing to user or program in many ways like printing on a screen.\n";
	cout << "definition - is full function with declaration and body. It looks like this: type name(paramiters) { instructions }.\n";
	cout << "declaration - defining a signature of the function: type of returned value, name, paramiters (and their types) of the function.\n";
	cout << "divide and conquer - says that the problem should be devided to smaller pices that makes it easier to solve.\n";
	cout << "else - one of three instruction from if statment. That says if if and else if are not true then do what is declared in else statment. It is optional.\n";
	cout << "end() - one of two vector methods. It returns iterator points to last element of the vector.\n";
	cout << "function - named and organized set of inctructions it can takes arguments and return values.\n";
	cout << "member function(component function) - is function declared in a class and process its data.\n";
	cout << "incrementation - it is instruction which raise up a value by one.\n";
	cout << "instruction - one command for computers processor.\n";
	cout << "for instruction - allows execute block of code a specified number of times, with option of initializing, conditional and updating a control variable.\n";
	cout << "if instruction - allows make decision depending on the result (true or false) of some condition.\n";
	cout << "switch instruction - other variant of if. It allows from single char, numbers values and enums in condition.\n";
	cout << "while instruction - other variant of for instruction. It works till the condition is true. It doesn't contain initialization or actualization.\n";
	cout << "iteration - it is one cicle of the loop.\n";
	cout << "l-value - left side of the expression, eg int a = 2, where 'int a' is left value of the expression.\n";
	cout << "loop - instruction that reapet the instructions written in definiton of the loop.\n";
	cout << "repetition - do something one more time.\n";
	cout << "processing - executing some insctrucions or calculating something.\n";
	cout << "push_back() - it is a class method. It could be defined by programer, but in default (cin.put_back(c)) it puts a c value back into a cin stream.\n";
	cout << "r-value - right side of the expression.\n";
	cout << "selection - \n";
	cout << "size() - vector class method that return count of the elements in a structure.\n";
	cout << "sort() - vector method that takes two iterators (some_name.begin(), some_name.end()) and return a sorted structure.\n";
	cout << "vector - specific dynamic structure similiar to the array, but with dynamic allocation of memmory, so we can add elements even if vector is 'full'.\n";
	cout << "expression - it is component that we can use in instructions, eg. 1 + 2  is expression.\n";
	cout << "ranged for instruction - it is special tape of for loop. Its task is to go through every element in a structure, from begining to end. We cant specifia number of iterations in this type of loop.\n";

	cout << "\n\n--- Chapter 5 - Errors ---\n\n";

	cout << "assertion - we checking if the value passed by us, is the same value that program will return. \n";
	cout << "error - it is a situation in our program when something went differently than expected.\n";
	cout << "runtime error - this type of error occurs at the same top when program is compiled, linked and while programm is ranning (in execution stage).\n";
	cout << "compilation error - \n";
	cout << "consolidation error - \n";
	cout << "sytax error - \n";
	cout << "type error - \n";
	cout << "range error - \n";
	cout << "argument error - \n";
	cout << "catch - \n";
	cout << "debug - \n";
	cout << "invariant - \n";
	cout << "testing - \n";
	cout << "throw - \n";
	cout << "pre-condition - \n";
	cout << "post-condition - \n";
	cout << "exception - \n";
	cout << "requirement - \n";

	cout << "\n\n--- Chapter 6 - Writing a program ---\n\n";
	
	cout << "analysis - It is process befor designing project, where came up to collect\n";
	cout << "parser (syntax analizer) - \n";
	cout << "class - \n";
	cout << "dividing by zero - \n";
	cout << "member function - \n";
	cout << "grammar - \n";
	cout << "implementation - \n";
	cout << "interface - \n";
	cout << "parser - \n";
	cout << "private - \n";
	cout << "project - \n";
	cout << "prototype - \n";
	cout << "use case - \n";
	cout << "pseudocode - \n";
	cout << "public - \n";
	cout << "class member - \n";
	cout << "token - \n";
	cout << "class data member - \n";

	cout << "\n\n--- Chapter 7 - Finishing a program ---\n\n";
	
	cout << "version history - \n";
	cout << "commenting - \n";
	cout << "fuctions multiplication - \n";
	cout << "errors handling - \n";
	cout << "recovery - \n";
	cout << "symbolic constant - \n";
	cout << "backbone - small pice of source code, that need to work and simply make job well. Writen in first stage of coding or for prototyping.\n";
	cout << "testing - \n";
	cout << "code aligment - \n";
	cout << "code maintenance - \n";


	return 0;
}